// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
export enum NativeActions {
  ready = 'ready',
  start = 'start',
  adLoad = 'adLoad',
  adShow = 'adShow',
  adHide = 'adHide',
  adCreate = 'adCreate',
  configure = 'configure',
  adIsLoaded = 'adIsLoaded',
  setAppMuted = 'setAppMuted',
  setAppVolume = 'setAppVolume',
  bannerConfig = 'bannerConfig',
  configRequest = 'configRequest',
  requestTrackingAuthorization = 'requestTrackingAuthorization'
}

export enum Events {
  ready = "admob.ready",
  adLoad = "admob.ad.load",
  adShow = "admob.ad.show",
  adClick = "admob.ad.click",
  adReward = "admob.ad.reward",
  adDismiss = "admob.ad.dismiss",
  adLoadFail = "admob.ad.loadfail",
  adShowFail = "admob.ad.showfail",
  adImpression = "admob.ad.impression",
  bannerSizeChange = "admob.ad.sizechange", // use same path
  bannerSize = "admob.ad.size" // use same path
}

export enum AdSizeType {
  BANNER,
  LARGE_BANNER,
  MEDIUM_RECTANGLE,
  FULL_BANNER,
  LEADERBOARD,
  SMART_BANNER,
}

export const execAsync = (action: NativeActions, args?: any[]) => {
  return new Promise((resolve, reject) => {
    cordova.exec(resolve, reject, 'AdMob', action, args)
  });
}

export function waitEvent(
  successEvent: string,
  failEvent = '',
): Promise<CustomEvent> {
  return new Promise((resolve, reject) => {
    document.addEventListener(
      successEvent as any,
      (event: CustomEvent) => {
        resolve(event)
      },
      false,
    )

    if (failEvent) {
      document.addEventListener(
        failEvent as any,
        (failedEvent: CustomEvent) => {
          reject(failedEvent)
        },
        false,
      )
    }
  })
};

export const initPlugin = () => {
  document.addEventListener(
    'deviceready',
    () => {
      cordova.exec(
        (event) => {
          cordova.fireDocumentEvent(event.type, event.data)
        },
        console.error,
        'AdMob',
        NativeActions.ready,
      )
    },
    false,
  )
};
